# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'number_setting.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_widget(object):
    def setupUi(self, widget, key, settings, steps, low_border, high_border, unit=None):
        self.key = key
        self.settings = settings
        self.steps = steps
        self.low_border = low_border
        self.high_border = high_border
        self.unit = unit
        self.current_value = int(self.settings.value(key, 0))
        widget.setObjectName("widget")
        widget.resize(600, 45)
        widget.setStyleSheet("#widget {\n"
                             "    background: black;\n"
                             "    border-bottom: 1px solid #CCC\n"
                             "}\n"
                             "\n"
                             "* {\n"
                             "    color: white\n"
                             "}")
        self.label_title = QtWidgets.QLabel(widget)
        self.label_title.setGeometry(QtCore.QRect(20, 10, 391, 25))
        font = QtGui.QFont()
        font.setFamily("Montserrat")
        font.setPointSize(13)
        self.label_title.setFont(font)
        self.label_title.setStyleSheet("")
        self.label_title.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.label_title.setObjectName("label_title")
        self.number_box = QtWidgets.QWidget(widget)
        self.number_box.setEnabled(True)
        self.number_box.setGeometry(QtCore.QRect(455, 7, 130, 30))
        self.number_box.setStyleSheet("#number_box {\n"
                                      "    background: #252525; color: white\n"
                                      "}\n"
                                      "\n"
                                      "#number_box::hover {\n"
                                      "    background: #303030;\n"
                                      "}")
        self.number_box.setObjectName("number_box")
        self.label_number = QtWidgets.QLabel(self.number_box)
        self.label_number.setGeometry(QtCore.QRect(40, 5, 50, 20))
        font = QtGui.QFont()
        font.setFamily("Montserrat")
        font.setPointSize(14)
        self.label_number.setFont(font)
        self.label_number.setStyleSheet("")
        self.label_number.setAlignment(QtCore.Qt.AlignCenter)
        self.label_number.setObjectName("label_number")
        self.btn_decrease = QtWidgets.QLabel(self.number_box)
        self.btn_decrease.setGeometry(QtCore.QRect(5, 3, 24, 24))
        self.btn_decrease.setText("")
        self.btn_decrease.setPixmap(QtGui.QPixmap(":/images/minus.svg"))
        self.btn_decrease.setScaledContents(True)
        self.btn_decrease.setObjectName("btn_decrease")
        self.btn_decrease.mouseReleaseEvent = self.decrease
        self.btn_increase = QtWidgets.QLabel(self.number_box)
        self.btn_increase.setGeometry(QtCore.QRect(101, 3, 24, 24))
        self.btn_increase.setText("")
        self.btn_increase.setPixmap(QtGui.QPixmap(":/images/plus.svg"))
        self.btn_increase.setScaledContents(True)
        self.btn_increase.setObjectName("btn_increase")
        self.btn_increase.mouseReleaseEvent = self.increase

        self.retranslateUi(widget)
        QtCore.QMetaObject.connectSlotsByName(widget)

    def retranslateUi(self, widget):
        _translate = QtCore.QCoreApplication.translate
        widget.setWindowTitle(_translate("widget", "Form"))
        self.label_title.setText(_translate("widget", "Title text"))
        if self.unit is not None:
            self.label_number.setText(str(self.current_value) + " " + self.unit)
        else:
            self.label_number.setText(str(self.current_value))

    def increase(self, event):
        self.current_value += self.steps
        if self.current_value > self.high_border:
            self.current_value = self.high_border
        self.settings.setValue(self.key, self.current_value)
        if self.unit is not None:
            self.label_number.setText(str(self.current_value) + " " + self.unit)
        else:
            self.label_number.setText(str(self.current_value))
        self.onValueChange(self.current_value)

    def decrease(self, event):
        self.current_value -= self.steps
        if self.current_value < self.low_border:
            self.current_value = self.low_border
        self.settings.setValue(self.key, self.current_value)
        if self.unit is not None:
            self.label_number.setText(str(self.current_value) + " " + self.unit)
        else:
            self.label_number.setText(str(self.current_value))
        self.onValueChange(self.current_value)

    def onValueChange(self, value):
        return
